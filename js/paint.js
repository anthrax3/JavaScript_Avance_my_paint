"use strict";
var Paint, paint,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

Paint = (function() {
  function Paint(canvas) {
    this.ev_canvas = __bind(this.ev_canvas, this);
    this.canvas = $('#' + canvas);
    this.context = this.canvas[0].getContext('2d');
    this.context.lineJoin = 'round';
    this.context.lineCap = 'round';
    this.canvasOffset = this.canvas.offset();
    this.mouse = {
      x: 0,
      y: 0
    };
    this.redo_list = [];
    this.undo_list = [];
    $('#size').bind('mousemove change', (function(_this) {
      return function() {
        return $('#sizepx').text($('#size').val());
      };
    })(this));
    $("#fill").change((function(_this) {
      return function(e) {
        return _this.initCanvas();
      };
    })(this));
    $('button').click((function(_this) {
      return function(e) {
        if (e.target.id === "save") {
          window.open(_this.canvas[0].toDataURL());
          return;
        }
        if (e.target.id === "redo") {
          _this.redo();
          return;
        }
        if (e.target.id === "undo") {
          _this.undo();
          return;
        }
        return _this.selectTool(e.target.id);
      };
    })(this));
    this.initCanvas();
  }

  Paint.prototype.selectTool = function(tool) {
    this.tool = tool;
    $('.active').removeClass('active');
    $('#' + this.tool).addClass('active');
    return this.initCanvas();
  };

  Paint.prototype.initCanvas = function() {
    this.canvas.unbind("mousemove").unbind("mouseup").unbind("mousedown").unbind("click");
    this.canvas.contextmenu((function(_this) {
      return function(e) {
        return false;
      };
    })(this));
    this.ev_canvas();
    if (this.tool !== 'text' && this.tool !== 'picker' && this.tool !== 'undo' && this.tool !== 'redo') {
      return this.canvas.bind('mousedown mousemove mouseup', this.ev_canvas);
    }
  };

  Paint.prototype.ev_canvas = function() {
    this.context.strokeStyle = $('#color').val();
    this.context.fillStyle = $('#color2').val();
    this.context.lineWidth = $('#size').val();
    this.offsetX = this.canvasOffset.left;
    this.offsetY = this.canvasOffset.top;
    switch (this.tool) {
      case "picker":
        return this.picker();
      case "line":
        return this.line();
      case "care":
        return this.care();
      case "circle":
        return this.circle();
      case "gomme":
        return this.gomme();
      case "new":
        return this["new"]();
      case "text":
        return this.text();
      case "save":
        return this.save();
      default:
        return this.pencil();
    }
  };

  Paint.prototype.picker = function() {
    return this.canvas.mousedown((function(_this) {
      return function(e) {
        var componentToHex, rgbToHex, tmp;
        tmp = _this.context.getImageData(e.clientX - _this.offsetX, e.clientY - _this.offsetY, 1, 1);
        componentToHex = function(color) {
          var hex;
          hex = color.toString(16);
          if (hex.length === 1) {
            return "0" + hex;
          } else {
            return hex;
          }
        };
        rgbToHex = function(r, g, b) {
          return "#" + componentToHex(r) + componentToHex(g) + componentToHex(b);
        };
        if (event.which === 1) {
          if (tmp.data[3] === 0) {
            return $('#color').val("#ffffff");
          } else {
            return $('#color').val(rgbToHex(tmp.data[0], tmp.data[1], tmp.data[2]));
          }
        } else {
          if (tmp.data[3] === 0) {
            return $('#color2').val("#ffffff");
          } else {
            return $('#color2').val(rgbToHex(tmp.data[0], tmp.data[1], tmp.data[2]));
          }
        }
      };
    })(this));
  };

  Paint.prototype.pencil = function() {
    this.canvas.mousedown((function(_this) {
      return function(e) {
        _this.isDrawing = true;
        _this.saveState();
        _this.context.moveTo(e.clientX - _this.offsetX, e.clientY - _this.offsetY);
        _this.context.beginPath();
        _this.context.arc(e.clientX - _this.offsetX, e.clientY - _this.offsetY, $('#size').val() / 100, 0, 2 * Math.PI);
        return _this.context.stroke();
      };
    })(this));
    this.canvas.mousemove((function(_this) {
      return function(e) {
        if (_this.isDrawing) {
          _this.context.lineTo(e.clientX - _this.offsetX, e.clientY - _this.offsetY);
          return _this.context.stroke();
        }
      };
    })(this));
    return this.canvas.mouseup((function(_this) {
      return function() {
        _this.isDrawing = false;
        return _this.initCanvas();
      };
    })(this));
  };

  Paint.prototype.line = function() {
    this.canvas.mousedown((function(_this) {
      return function(e) {
        _this.isDrawing = true;
        _this.saveState();
        _this.mouse.x = e.clientX - _this.offsetX;
        _this.mouse.y = e.clientY - _this.offsetY;
        return _this.tmp = _this.context.getImageData(0, 0, _this.canvas[0].width, _this.canvas[0].height);
      };
    })(this));
    return this.canvas.mousemove((function(_this) {
      return function(e) {
        if (_this.isDrawing) {
          _this.context.clearRect(0, 0, _this.canvas[0].width, _this.canvas[0].height);
          _this.context.beginPath();
          _this.context.putImageData(_this.tmp, 0, 0);
          _this.context.moveTo(_this.mouse.x, _this.mouse.y);
          _this.context.lineTo(e.clientX - _this.offsetX, e.clientY - _this.offsetY);
          _this.context.closePath();
          _this.context.stroke();
          _this.canvas.mousedown(function(e) {
            _this.isDrawing = false;
            return _this.initCanvas();
          });
          return _this.canvas.mouseup(function(e) {
            _this.isDrawing = false;
            return _this.initCanvas();
          });
        }
      };
    })(this));
  };

  Paint.prototype.care = function() {
    this.canvas.mousedown((function(_this) {
      return function(e) {
        _this.isDrawing = true;
        _this.saveState();
        _this.mouse.x = e.clientX - _this.offsetX;
        _this.mouse.y = e.clientY - _this.offsetY;
        return _this.tmp = _this.context.getImageData(0, 0, _this.canvas[0].width, _this.canvas[0].height);
      };
    })(this));
    return this.canvas.mousemove((function(_this) {
      return function(e) {
        var h, w, x, y;
        if (_this.isDrawing) {
          x = Math.min(e.clientX - _this.offsetX, _this.mouse.x);
          y = Math.min(e.clientY - _this.offsetY, _this.mouse.y);
          w = Math.abs(e.clientX - _this.offsetX - _this.mouse.x);
          h = Math.abs(e.clientY - _this.offsetY - _this.mouse.y);
          _this.context.clearRect(0, 0, _this.canvas[0].width, _this.canvas[0].height);
          _this.context.putImageData(_this.tmp, 0, 0);
          _this.context.beginPath();
          _this.context.rect(x, y, w, h);
          _this.context.closePath();
          if ($("#fill").is(":checked")) {
            _this.context.fill();
          }
          _this.context.stroke();
          _this.canvas.mousedown(function(e) {
            _this.isDrawing = false;
            return _this.initCanvas();
          });
          return _this.canvas.mouseup(function(e) {
            _this.isDrawing = false;
            return _this.initCanvas();
          });
        }
      };
    })(this));
  };

  Paint.prototype.circle = function() {
    this.canvas.mousedown((function(_this) {
      return function(e) {
        _this.isDrawing = true;
        _this.saveState();
        _this.mouse.x = e.clientX - _this.offsetX;
        _this.mouse.y = e.clientY - _this.offsetY;
        return _this.tmp = _this.context.getImageData(0, 0, _this.canvas[0].width, _this.canvas[0].height);
      };
    })(this));
    return this.canvas.mousemove((function(_this) {
      return function(e) {
        var r, x2, y2;
        if (_this.isDrawing) {
          x2 = Math.abs(e.clientX - _this.offsetX);
          y2 = Math.abs(e.clientY - _this.offsetY);
          r = Math.sqrt(Math.pow(x2 - _this.mouse.x, 2) + Math.pow(y2 - _this.mouse.y, 2));
          _this.context.clearRect(0, 0, _this.canvas[0].width, _this.canvas[0].height);
          _this.context.putImageData(_this.tmp, 0, 0);
          _this.context.beginPath();
          _this.context.arc(_this.mouse.x, _this.mouse.y, r, 0, 2 * Math.PI);
          if ($("#fill").is(":checked")) {
            _this.context.fill();
          }
          _this.context.stroke();
          _this.canvas.mousedown(function(e) {
            _this.isDrawing = false;
            return _this.initCanvas();
          });
          return _this.canvas.mouseup(function(e) {
            _this.isDrawing = false;
            return _this.initCanvas();
          });
        }
      };
    })(this));
  };

  Paint.prototype.text = function() {
    return this.canvas.click((function(_this) {
      return function(e) {
        var text;
        text = prompt("Rentre ton text");
        _this.saveState();
        if (text !== null) {
          _this.mouse.x = e.clientX - _this.offsetX;
          _this.mouse.y = e.clientY - _this.offsetY;
          _this.context.font = $('#size').val() + "pt Calibri";
          _this.context.fillStyle = $('#color').val();
          _this.context.fillText(text, _this.mouse.x, _this.mouse.y);
          return _this.initCanvas();
        }
      };
    })(this));
  };

  Paint.prototype.gomme = function() {
    this.canvas.mousedown((function(_this) {
      return function(e) {
        _this.isDrawing = true;
        _this.saveState();
        _this.context.moveTo(e.clientX - _this.offsetX, e.clientY - _this.offsetY);
        return _this.context.beginPath();
      };
    })(this));
    this.canvas.mousemove((function(_this) {
      return function(e) {
        if (_this.isDrawing) {
          _this.context.strokeStyle = "#FFFFFF";
          _this.context.lineTo(e.clientX - _this.offsetX, e.clientY - _this.offsetY);
          return _this.context.stroke();
        }
      };
    })(this));
    return this.canvas.mouseup((function(_this) {
      return function() {
        _this.isDrawing = false;
        _this.context.strokeStyle = $('#color').val();
        return _this.initCanvas();
      };
    })(this));
  };

  Paint.prototype["new"] = function() {
    this.saveState();
    this.context.clearRect(0, 0, this.canvas[0].width, this.canvas[0].height);
    return this.selectTool("pencil");
  };

  Paint.prototype.saveState = function(list, keep_redo) {
    keep_redo = keep_redo || false;
    if (!keep_redo) {
      this.redo_list = [];
    }
    return (list || this.undo_list).push(this.canvas[0].toDataURL());
  };

  Paint.prototype.undo = function() {
    return this.restoreState(this.undo_list, this.redo_list);
  };

  Paint.prototype.redo = function() {
    return this.restoreState(this.redo_list, this.undo_list);
  };

  Paint.prototype.restoreState = function(pop, push) {
    var img, restore_state;
    if (pop.length) {
      this.saveState(push, true);
      restore_state = pop.pop();
      img = new Image();
      img.src = restore_state;
      return img.onload = (function(_this) {
        return function() {
          _this.context.clearRect(0, 0, _this.canvas[0].width, _this.canvas[0].height);
          return _this.context.drawImage(img, 0, 0, _this.canvas[0].width, _this.canvas[0].height, 0, 0, _this.canvas[0].width, _this.canvas[0].height);
        };
      })(this);
    }
  };

  return Paint;

})();

paint = new Paint('canvas');

//# sourceMappingURL=data:application/json;base64,